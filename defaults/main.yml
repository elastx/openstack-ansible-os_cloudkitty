---
# Copyright 2016, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## Verbosity Options
debug: False

# Set the package install state for distribution and pip packages
# Options are 'present' and 'latest'
cloudkitty_package_state: "latest"
cloudkitty_pip_package_state: "latest"

cloudkitty_service_user_name: cloudkitty

cloudkitty_rabbitmq_userid: cloudkitty
cloudkitty_rabbitmq_vhost: /cloudkitty
cloudkitty_rabbitmq_port: 5672
cloudkitty_rabbitmq_servers: 127.0.0.1
cloudkitty_rabbitmq_use_ssl: False

cloudkitty_system_group_name: cloudkitty
cloudkitty_system_user_name: cloudkitty
cloudkitty_system_comment: meow
cloudkitty_system_shell: /bin/false
cloudkitty_system_home_folder: "/var/lib/{{ cloudkitty_system_user_name }}"

cloudkitty_venv_tag: untagged
cloudkitty_bin: "/openstack/venvs/cloudkitty-{{ cloudkitty_venv_tag }}/bin"

# venv_download, even when true, will use the fallback method of building the
# venv from scratch if the venv download fails.
cloudkitty_venv_download: "{{ not cloudkitty_developer_mode | bool }}"
cloudkitty_venv_download_url: http://127.0.0.1/venvs/untagged/ubuntu/cloudkitty.tgz

cloudkitty_git_repo: https://git.openstack.org/openstack/cloudkitty
cloudkitty_git_install_branch: stable/pike

cloudkitty_developer_constraints:
  - "git+{{ cloudkitty_git_repo }}@{{ cloudkitty_git_install_branch }}#egg=cloudkitty"

cloudkitty_developer_mode: false
cloudkitty_notification_topics: notifications
cloudkitty_collect_services: compute
cloudkitty_collector: gnocchi
cloudkitty_service_project_domain_id: default
cloudkitty_service_project_name: "service"
cloudkitty_service_user_domain_id: default

cloudkitty_user_domain_name: Default
cloudkitty_keystone_auth_plugin: password
cloudkitty_output_backend: cloudkitty.backend.file.FileBackend
cloudkitty_output_pipeline: osrf
cloudkitty_output_basepath: /var/cloudkitty/reports

cloudkitty_galera_address: "{{ galera_address | default('127.0.0.1') }}"
cloudkitty_galera_database: cloudkitty
cloudkitty_galera_user: cloudkitty

## Service Type and Data
cloudkitty_service_region: RegionOne
cloudkitty_service_name: cloudkitty
cloudkitty_service_type: rating
cloudkitty_service_port: 8089
cloudkitty_service_proto: http
cloudkitty_service_publicuri_proto: "{{ openstack_service_publicuri_proto | default(cloudkitty_service_proto) }}"
cloudkitty_service_adminuri_proto: "{{ openstack_service_adminuri_proto | default(cloudkitty_service_proto) }}"
cloudkitty_service_internaluri_proto: "{{ openstack_service_internaluri_proto | default(cloudkitty_service_proto) }}"
cloudkitty_service_publicuri: "{{ cloudkitty_service_publicuri_proto }}://{{ external_lb_vip_address }}:{{ cloudkitty_service_port }}"
cloudkitty_service_publicurl: "{{ cloudkitty_service_publicuri }}/"
cloudkitty_service_adminuri: "{{ cloudkitty_service_adminuri_proto }}://{{ internal_lb_vip_address }}:{{ cloudkitty_service_port }}"
cloudkitty_service_adminurl: "{{ cloudkitty_service_adminuri }}/"
cloudkitty_service_internaluri: "{{ cloudkitty_service_internaluri_proto }}://{{ internal_lb_vip_address }}:{{ cloudkitty_service_port }}"
cloudkitty_service_internalurl: "{{ cloudkitty_service_internaluri }}/"

#: Set this to false to disable API service through Apache + mod_wsgi
cloudkitty_use_mod_wsgi: true

# Apache setup
cloudkitty_apache_log_level: info
cloudkitty_apache_servertokens: "Prod"
cloudkitty_apache_serversignature: "Off"
cloudkitty_wsgi_threads: 1
cloudkitty_wsgi_processes_max: 16
cloudkitty_wsgi_processes: "{{ [[ansible_processor_vcpus|default(1), 1] | max * 2, cloudkitty_wsgi_processes_max] | min }}"

# set cloudkitty_ssl to true to enable SSL configuration on the cloudkitty containers
cloudkitty_ssl: false
cloudkitty_ssl_cert: /etc/ssl/certs/cloudkitty.pem
cloudkitty_ssl_key: /etc/ssl/private/cloudkitty.key
cloudkitty_ssl_ca_cert: /etc/ssl/certs/cloudkitty-ca.pem
cloudkitty_ssl_protocol: "{{ ssl_protocol | default('ALL -SSLv2 -SSLv3') }}"
cloudkitty_ssl_cipher_suite: "{{ ssl_cipher_suite | default('ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS') }}"

# if using a self-signed certificate, set this to true to regenerate it
cloudkitty_ssl_self_signed_regen: false
cloudkitty_ssl_self_signed_subject: "/C=US/ST=Texas/L=San Antonio/O=IT/CN={{ internal_lb_vip_address }}/subjectAltName=IP.1={{ external_lb_vip_address }}"

# Set these in user_variables to deploy custom certificates
#cloudkitty_user_ssl_cert: <path to cert on ansible deployment host>
#cloudkitty_user_ssl_key: <path to cert on ansible deployment host>
#cloudkitty_user_ssl_ca_cert: <path to cert on ansible deployment host>

cloudkitty_cloudkitty_conf_overrides: {}
cloudkitty_policy_overrides: {}
cloudkitty_api_paste_ini_overrides: {}
cloudkitty_api_init_overrides: {}
cloudkitty_processor_init_overrides: {}
cloudkitty_metrics_overrides: {}

## Service Name-Group Mapping
cloudkitty_services:
  cloudkitty-api:
    group: cloudkitty_api
    service_name: cloudkitty-api
    service_enabled: "{{ cloudkitty_use_mod_wsgi | ternary(false, true) }}"
    init_config_overrides: "{{ cloudkitty_api_init_overrides }}"
  cloudkitty-processor:
    group: cloudkitty_api
    service_name: cloudkitty-processor
    service_enabled: true
    init_config_overrides: "{{ cloudkitty_processor_init_overrides }}"

cloudkitty_pip_packages:
  - cloudkitty
  - cryptography
  - msgpack-python
  - PyMySQL
  - python-memcached
  - tooz

cloudkitty_requires_pip_packages:
  - virtualenv
  - python-keystoneclient
  - httplib2

# This variable is used by the repo_build process to determine
# which host group to check for members of before building the
# pip packages required by this role. The value is picked up
# by the py_pkgs lookup.
cloudkitty_role_project_group: cloudkitty_all

# The messaging driver to use, defaults to rabbit. Other drivers
# include qpid and zmq. (string value)
cloudkitty_database_connection: "mysql+pymysql://{{ cloudkitty_galera_user }}:{{ cloudkitty_container_mysql_password }}@{{ cloudkitty_galera_address }}/{{ cloudkitty_galera_database }}?charset=utf8"
